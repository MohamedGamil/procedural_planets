using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
    this class implements a planet object 
    Methods:
    - GeneratePlanet: does what it says
    - GenerateMesh: applies shape deformation to sphere 
    - GenerateColour: applies shader to sphere 
    - Initialise: draws a planet
    - onShapeSettingsUpdated: redraws planet whenever user changes shape parameters
    - onColourSettingsupdated: ditto, for colour parameters
 */
public class Planet : MonoBehaviour {

    // global parameters
    [Range(2,256)]
    public int resolution = 10; // the spatial resolution of the mesh grid (i.e. density of vertices)
    public bool autoUpdate = true; // update planet every time a parameter is changed

        
    // generators for shape and colour properties:
    ShapeGenerator shapeGenerator = new ShapeGenerator();
    ColourGenerator colourGenerator = new ColourGenerator();
    
    // settings for shape and colour properties:
    public ShapeSettings shapeSettings;
    public ColourSettings colourSettings;


    // the meshes that comprise a planet are defined here
    [SerializeField, HideInInspector]
    MeshFilter[] meshFilters;
    PlanetFace[] planetFaces;

    // gui editor: foldout for settings
    [HideInInspector]
    public bool shapeSettingsFoldout;
    [HideInInspector]
    public bool colourSettingsFoldout; 

        /*
        generates a new planet.
        Initialise: creates sphere
        generateMesh: applies distortion defined by shapeSettings and stores elevation data
        generateColours: applies colour gradient to elevation data
     */
    public void GeneratePlanet()
    {
        Initialise();
        GenerateMesh();
        GenerateColours();
    }

    /*
        applies distortion defined by shapeSettings and generated by shapeGenerator to each 
        point on the sphere, separately for each of its six faces .
     */
    void GenerateMesh()
    {
        foreach (PlanetFace face in planetFaces)
        {
            face.ConstructMesh();
        }
        colourGenerator.updateElevation(shapeGenerator.elevationMinMax);        
    }

    /*
        adds shaders to planet.
        currently, this is only a colour gradient that scales with altitude
     */
    void GenerateColours()
    {
        foreach (MeshFilter m in meshFilters)
        {
            // m.GetComponent<MeshRenderer>().sharedMaterial.color = colourSettings.planetColour;
            colourGenerator.UpdateColours();
        }
        
    }


    /*
        whenever this function is called, a new planet is generated.
        The planet consists of six mesh grids, arranged as a cube. 
        The grids are transformed such that the cube looks like a sphere.
        Then, filters are applied to the mesh to alter its appearance.
        Currently, two filters exist:
        - shape (applies simplex noise)
        - colour (applies a colour grandient)    
     */
	void Initialise()
    {
        // on init, load settings:
        shapeGenerator.ApplySettings(shapeSettings);
        colourGenerator.ApplySettings(colourSettings);

        // init is called multiple times, e.g. whenever settings have been updated, thus restrict construction of meshes to first call
        if (meshFilters == null || meshFilters.Length == 0)
        {
            meshFilters = new MeshFilter[6];
        }
        planetFaces = new PlanetFace[6];

        Vector3[] directions = { Vector3.up, Vector3.down, Vector3.left, Vector3.right, Vector3.forward, Vector3.back };
        // the planet is actually a cube (with six faces). To generate a sphere, the faces are inflated (i.e. bent outwards)  
        
        // add the meshes and transform the cube into a sphere!
        for (int i = 0; i < 6; i++)
        {
            if (meshFilters[i] == null)
            {
                GameObject meshObj = new GameObject("mesh");
                meshObj.transform.parent = transform;

                // meshObj.AddComponent<MeshRenderer>().sharedMaterial = new Material(Shader.Find("Standard"));
                meshObj.AddComponent<MeshRenderer>();
                meshFilters[i] = meshObj.AddComponent<MeshFilter>();
                meshFilters[i].sharedMesh = new Mesh();
            }
            meshFilters[i].GetComponent<MeshRenderer>().sharedMaterial = colourSettings.planetMaterial;

            // call constructor, i.e. populate array with planet faces
            planetFaces[i] = new PlanetFace(shapeGenerator, meshFilters[i].sharedMesh, resolution, directions[i]);            
            meshFilters[i].gameObject.SetActive(true);
        }
    }




    /*
        redraw mesh whenever shape settings have been updated
     */
    public void OnShapeSettingsUpdated()
    {
        if (autoUpdate)
        {
            Initialise();
            GenerateMesh();
        }
    }

    /*
        redraw shaders whenever colour settings have been updated
     */
    public void OnColourSettingsUpdated()
    {
        if (autoUpdate)
        {
            Initialise();
            GenerateColours();
        }
    }

}
